import "dotenv/config";
import readline from "readline";
import chalk from "chalk";
import { ethers } from "ethers";

class AllFeatureBot {
  constructor() {
    this.RPC_URL = process.env.RPC_URL || "https://sepolia.infura.io/v3/ef659d824bd14ae798d965f855f2cfd6";
    this.PRIVATE_KEY = process.env.PRIVATE_KEY;
    this.provider = new ethers.JsonRpcProvider(this.RPC_URL);
    this.wallet = this.PRIVATE_KEY ? new ethers.Wallet(this.PRIVATE_KEY, this.provider) : null;
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    this.state = {};
  }

  printHeader() {
    console.clear();
    console.log(chalk.bold.cyan("═══════════════════════════════════════════════════"));
    console.log(chalk.bold.cyan("               R2 CLI BOT INTERFACE"));
    console.log(chalk.cyan("───────────────────────────────────────────────────"));
    if (this.wallet)
      console.log(chalk.gray(`Address: ${this.wallet.address.slice(0, 6)}...${this.wallet.address.slice(-4)}`));
    console.log(chalk.bold.cyan("═══════════════════════════════════════════════════\n"));
  }

  async prompt(question, validator = null) {
    return new Promise((resolve) => {
      this.rl.question(chalk.yellow(question), (answer) => {
        if (validator) {
          const valid = validator(answer.trim());
          if (valid === true) return resolve(answer.trim());
          this.log(valid, "error");
          return resolve(this.prompt(question, validator));
        }
        resolve(answer.trim());
      });
    });
  }

  log(msg, type = "info") {
    let color = chalk.white;
    if (type === "error") color = chalk.red;
    if (type === "success") color = chalk.green;
    if (type === "info") color = chalk.blue;
    console.log(color(`[${new Date().toLocaleTimeString()}] ${msg}`));
  }

  async mainMenu() {
    while (true) {
      this.printHeader();
      console.log(
        chalk.white(
          "1. Check-In - Claim PHRS Faucet\n" +
          "2. Send To Friends\n" +
          "3. Wrapped - Unwrapped\n" +
          "4. Add Liquidity Pool\n" +
          "5. Swap WPHRS - USDC - USDT\n" +
          "6. Run All Features\n" +
          "7. Exit\n"
        )
      );
      const choice = await this.prompt("> Choose [1/2/3/4/5/6/7]: ", (ans) => {
        if (["1", "2", "3", "4", "5", "6", "7"].includes(ans)) return true;
        return "Pilihan tidak valid!";
      });
      if (choice === "6") {
        await this.runAllFeatures();
      } else if (choice === "7") {
        this.rl.close();
        this.log("Goodbye!", "success");
        process.exit(0);
      } else {
        this.log("Fitur hanya demo pada menu 'Run All Features'.", "info");
        await this.prompt("Tekan Enter untuk kembali...");
      }
    }
  }

  async runAllFeatures() {
    this.printHeader();
    this.log("Run All Features Selected.", "success");

    // 1. Transfer
    const txCount = Number(await this.prompt(
      "How Many Times Do You Want To Make a Transfer? -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));
    const txAmount = Number(await this.prompt(
      "Enter Amount for Each Transfers [1 or 0.01 or 0.001, etc in decimals] -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));

    // 2. Wrapped/Unwrapped/Skip
    this.printHeader();
    console.log(chalk.white(
      "Select Option:\n" +
      "1. Wrapped PHRS to WPHRS\n" +
      "2. Unwrapped WPHRS to PHRS\n" +
      "3. Skipped\n"
    ));
    const wrapOption = await this.prompt("Choose [1/2/3] -> ", v => ["1", "2", "3"].includes(v) ? true : "Pilih 1, 2, atau 3");
    let wrapAmount = null;
    if (wrapOption !== "3") {
      wrapAmount = Number(await this.prompt(
        "Enter Amount [1 or 0.01 or 0.001, etc in decimals] -> ",
        v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
      ));
      this.log(wrapOption === "1" ? "Wrapped PHRS to WPHRS Selected." : "Unwrapped WPHRS to PHRS Selected.", "info");
    } else {
      this.log("Skipped wrapped/unwrapped.", "info");
    }

    // 3. Add Liquidity
    const addLpCount = Number(await this.prompt(
      "How Many Times Do You Want To Add Liquidity Pool? -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));

    // 4. Swap
    const swapCount = Number(await this.prompt(
      "How Many Times Do You Want To Make a Swap? -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));
    const wphrsAmount = Number(await this.prompt(
      "WPHRS Swap Amount? [1 or 0.01 or 0.001, etc in decimals] -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));
    const usdcAmount = Number(await this.prompt(
      "USDC Swap Amount? [1 or 0.01 or 0.001, etc in decimals] -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));
    const usdtAmount = Number(await this.prompt(
      "USDT Swap Amount? [1 or 0.01 or 0.001, etc in decimals] -> ",
      v => !isNaN(v) && Number(v) > 0 ? true : "Masukkan angka > 0"
    ));

    // 5. Delay
    const minDelay = Number(await this.prompt(
      "Min Delay Each Tx -> ",
      v => !isNaN(v) && Number(v) >= 0 ? true : "Masukkan angka >= 0"
    ));
    const maxDelay = Number(await this.prompt(
      "Max Delay Each Tx -> ",
      v => !isNaN(v) && Number(v) >= minDelay ? true : "Max Delay harus >= Min Delay"
    ));

    // Summary (demo)
    this.printHeader();
    this.log("SUMMARY INPUT:", "success");
    console.log(chalk.white(
      `Transfer: ${txCount}x, amount ${txAmount}\n` +
      `Wrapped/Unwrapped: ${wrapOption}, amount ${wrapAmount || "-"}\n` +
      `Add Liquidity: ${addLpCount}x\n` +
      `Swap: ${swapCount}x, WPHRS=${wphrsAmount}, USDC=${usdcAmount}, USDT=${usdtAmount}\n` +
      `Delay: min ${minDelay}s, max ${maxDelay}s\n`
    ));
    this.log("Ini hanya DEMO input interaktif seperti bot1.py!", "info");
    await this.prompt("Tekan Enter untuk kembali ke menu utama...");
  }
}

async function main() {
  const bot = new AllFeatureBot();
  if (!bot.PRIVATE_KEY) {
    bot.log("🛑 PRIVATE_KEY tidak ditemukan di .env", "error");
    process.exit(1);
  }
  await bot.mainMenu();
}

main();